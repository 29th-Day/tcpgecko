cmake_minimum_required(VERSION 3.18)

# Set the project name
set(TARGET "tcpgecko")

# Extract env variable
set(DEVKITPRO $ENV{DEVKITPRO})

set(CMAKE_TOOLCHAIN_FILE "${DEVKITPRO}/cmake/WiiU.cmake")

set(PPC-EABI "${DEVKITPRO}/devkitPPC/bin/powerpc-eabi")
set(CMAKE_C_COMPILER "${PPC-EABI}-gcc")
set(CMAKE_CPP_COMPILER "${PPC-EABI}-g++")
set(CMAKE_ASM_COMPILER "${PPC-EABI}-gcc")
set(CMAKE_AR "${PPC-EABI}-ar")
set(CMAKE_OBJCOPY "${PPC-EABI}-objcopy")

set(CMAKE_EXE_LINKER_FLAGS "-nostartfiles -Wl,-Map,$(notdir $@).map,--gc-sections")

project(${TARGET} LANGUAGES C CXX ASM)

# Set the C++ standard
set(CMAKE_CXX_STANDARD 20)

# Add extra include directories (for use with a Linux distribution or WSL in CLion)
# set(DEVKITPPC ${DEVKITPRO})
# set(POWERPCEABI ${DEVKITPRO}/devkitPPC/powerpc-eabi)
# set(WUT ${DEVKITPRO}/wut)
# set(LIBOGC ${DEVKITPRO}/libogc)
# set(PORTLIBS ${DEVKITPRO}/portlibs/ppc)
# set(WUPS ${DEVKITPRO}/wups)
# set(WUMS ${DEVKITPRO}/wums)

set(DEPENDENCIES
    ${DEVKITPRO}/portlibs/ppc
    ${DEVKITPRO}/devkitPPC/powerpc-eabi
    ${DEVKITPRO}/libogc
    ${DEVKITPRO}/wut
    ${DEVKITPRO}/wups
    ${DEVKITPRO}/wums
)

# # Add extra include directories (for use with a Linux distribution or WSL in CLion)
# set(DEVKITPPC /mnt/c/devkitPro)
# set(WUT ${DEVKITPPC}/mnt/c/devkitPro/wut/include)
# set(POWERPCEABI ${DEVKITPPC}/devkitPPC/powerpc-eabi/include)
# set(LIBOGC ${DEVKITPPC}/libogc/include)
# set(PORTLIBS ${DEVKITPPC}/portlibs/ppc/include)
# set(WUPS ${DEVKITPPC}/wups/include)
# set(WUMS ${DEVKITPPC}/wums/include)
# include_directories(${PORTLIBS})
# include_directories(${POWERPCEABI})
# include_directories(${LIBOGC})
# include_directories(${WUT})
# include_directories(${WUPS})
# include_directories(${WUMS})

add_executable(${TARGET}
    src/test.c
    # src/entry.c

    # src/common/common.h
    # # src/common/fs_defs.h
    # src/common/kernel_defs.h
    # src/common/loader_defs.h
    # # src/common/os_defs.h
    # src/common/retain_vars.c
    # src/common/retain_vars.h
    # src/common/types.h

    # # src/dynamic_libs/aoc_functions.c
    # # src/dynamic_libs/aoc_functions.h
    # # src/dynamic_libs/ax_functions.c
    # # src/dynamic_libs/ax_functions.h
    # # src/dynamic_libs/fs_functions.c
    # # src/dynamic_libs/fs_functions.h
    # # src/dynamic_libs/gx2_functions.c
    # # src/dynamic_libs/gx2_functions.h
    # # src/dynamic_libs/os_functions.c
    # # src/dynamic_libs/os_functions.h
    # # src/dynamic_libs/padscore_functions.c
    # # src/dynamic_libs/padscore_functions.h
    # # src/dynamic_libs/socket_functions.c
    # # src/dynamic_libs/socket_functions.h
    # # src/dynamic_libs/sys_functions.c
    # # src/dynamic_libs/sys_functions.h
    # # src/dynamic_libs/vpad_functions.c
    # # src/dynamic_libs/vpad_functions.h

    # src/fs/CFile.cpp
    # src/fs/CFile.hpp
    # src/fs/DirList.h
    # src/fs/DirList.cpp
    # src/fs/fs_utils.h
    # src/fs/fs_utils.c
    # src/fs/sd_fat_devoptab.c
    # src/fs/sd_fat_devoptab.h

    # src/game/memory_area_table.h
    # src/game/memory_area_table.c
    # src/game/rpx_rpl_table.h
    # src/game/rpx_rpl_table.c

    # src/kernel/kernel_functions.h
    # src/kernel/kernel_functions.c
    # src/kernel/kernel_hooks.S
    # src/kernel/syscalls.c
    # src/kernel/syscalls.h
    # src/kernel/syscalls_asm.S

    # src/patcher/fs_logger.h
    # src/patcher/fs_logger.c
    # src/patcher/function_patcher_coreinit.h
    # src/patcher/function_patcher_coreinit.c
    # src/patcher/function_patcher_gx2.h
    # src/patcher/function_patcher_gx2.c

    # src/system/exception_handler.h
    # src/system/exception_handler.cpp
    # # src/system/memory.c
    # # src/system/memory.h

    # src/tcpgecko/main.h
    # src/tcpgecko/main.cpp
    # src/tcpgecko/address.h
    # src/tcpgecko/address.cpp
    # src/tcpgecko/assertions.h
    # # src/tcpgecko/cafe.h
    # src/tcpgecko/code_handler.h
    # src/tcpgecko/disassembler.h
    # src/tcpgecko/disassembler.cpp
    # src/tcpgecko/hardware_breakpoints.h
    # src/tcpgecko/hardware_breakpoints.S
    # src/tcpgecko/kernel.h
    # src/tcpgecko/linked_list.h
    # src/tcpgecko/linked_list.cpp
    # src/tcpgecko/net.h
    # src/tcpgecko/net.cpp
    # src/tcpgecko/pause.h
    # src/tcpgecko/raw_assembly_cheats.h
    # src/tcpgecko/sd_cheats.h
    # src/tcpgecko/sd_cheats.cpp
    # src/tcpgecko/sd_ip_reader.h
    # src/tcpgecko/sd_ip_reader.cpp
    # src/tcpgecko/software_breakpoints.h
    # src/tcpgecko/stack.h
    # src/tcpgecko/stringify.h
    # src/tcpgecko/tcp_gecko.h
    # src/tcpgecko/tcp_gecko.cpp
    # src/tcpgecko/texture.h
    # src/tcpgecko/threads.h
    # src/tcpgecko/threads.cpp
    # src/tcpgecko/title.h
    # src/tcpgecko/title.cpp
    # src/tcpgecko/utilities.h

    # src/utils/function_patcher.h
    # src/utils/function_patcher.cpp
    # src/utils/logger.h
    # src/utils/logger.c
    # src/utils/ppc_asm.h
    # src/utils/StringTools.h
    # src/utils/StringTools.cpp
    # src/utils/utils.h
)


# Info: -D__WIIU__ is treated the same as __WIIU__
# https://cmake.org/cmake/help/latest/command/target_compile_definitions.html

# Add definitions for smarter code analysis
# added as a -Dxxx flag
target_compile_definitions(${TARGET} PUBLIC
    __WIIU__ __WUT__ __WUPS__ _GNU_SOURCE
)

target_compile_options(${TARGET} PUBLIC
    $<$<COMPILE_LANGUAGE:C,CXX>:-mrvl -mcpu=750 -meabi -mhard-float -ffast-math -O3 -Wall -Wextra -D_GNU_SOURCE -Wno-unused-parameter -Wno-strict-aliasing>
    $<$<COMPILE_LANGUAGE:C>:-std=gnu11>
    $<$<COMPILE_LANGUAGE:CXX>:-std=gnu++11>
    $<$<COMPILE_LANGUAGE:ASM>:-mregnames>
)

# # Ugly as shit but whatever
# target_link_options(${TARGET} PUBLIC
#     "-nostartfiles -Wl,-Map,${TARGET}.map,-wrap,malloc,-wrap,free,-wrap,memalign,-wrap,calloc,-wrap,realloc,-wrap,malloc_usable_size,-wrap,_malloc_r,-wrap,_free_r,-wrap,_realloc_r,-wrap,_calloc_r,-wrap,_memalign_r,-wrap,_malloc_usable_size_r,-wrap,valloc,-wrap,_valloc_r,-wrap,_pvalloc_r,--gc-sections"
# )

target_link_options(${TARGET} PUBLIC
    "-nostartfiles"
    "-Wl,-Map,${TARGET}.map"
    # "-Wl,-wrap,malloc"
    # "-Wl,-wrap,free"
    # "-Wl,-wrap,memalign"
    # "-Wl,-wrap,calloc"
    # "-Wl,-wrap,realloc"
    # "-Wl,-wrap,malloc_usable_size"
    # "-Wl,-wrap,_malloc_r"
    # "-Wl,-wrap,_free_r"
    # "-Wl,-wrap,_realloc_r"
    # "-Wl,-wrap,_calloc_r"
    # "-Wl,-wrap,_memalign_r"
    # "-Wl,-wrap,_malloc_usable_size_r"
    # "-Wl,-wrap,valloc"
    # "-Wl,-wrap,_valloc_r"
    # "-Wl,-wrap,_pvalloc_r"
    "-Wl,--gc-sections"
)

foreach(path ${DEPENDENCIES})
    target_include_directories(${TARGET} PUBLIC "${path}/include")
endforeach()

# get_target_property(dir_list ${TARGET} INCLUDE_DIRECTORIES)
# if(dir_list)
#     message(STATUS "Include directories for target '${TARGET}':")
#     foreach(dir ${dir_list})
#         message(STATUS "  ${dir}")
#     endforeach()
# else()
#     message(STATUS "No include directories set for target '${TARGET}'.")
# endif()

# foreach(path ${DEPENDENCIES})
#     target_link_directories(${TARGET} PUBLIC "${path}/lib")
# endforeach()
# target_link_directories(${TARGET} PUBLIC
#     "${DEVKITPRO}/devkitPPC/lib/gcc/powerpc-eabi/13.1.0"
# )

# get_target_property(dir_list ${TARGET} LINK_DIRECTORIES)
# if(dir_list)
#     message(STATUS "Link directories for target '${TARGET}':")
#     foreach(dir ${dir_list})
#         message(STATUS "  ${dir}")
#     endforeach()
# else()
#     message(STATUS "No link directories set for target '${TARGET}'.")
# endif()

find_library(LIBM NAMES m HINTS ${DEVKITPRO}/devkitPPC/powerpc-eabi/lib)
find_library(LIBFAT NAMES fat HINTS ${DEVKITPRO}/libogc/lib/wii)
find_library(LIBZ NAMES z HINTS ${DEVKITPRO}/portlibs/ppc/lib)
find_library(LIBIOSUHAX NAMES z HINTS ${DEVKITPRO}/portlibs/ppc/lib)
find_library(LIBGD NAMES z HINTS ${DEVKITPRO}/portlibs/ppc/lib)

target_link_libraries(${TARGET} PUBLIC
    ${LIBM}
    ${LIBFAT}
    ${LIBZ}
    ${LIBIOSUHAX}
    ${LIBGD}
)
